# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Sale {
  id: Int!
}

type Form {
  id: Int!
  label: String!
}

type Unit {
  id: Int!
  label: String!
  multiplicity: Float!
  description: String!
  parentId: Float!
}

type MedicineForm {
  id: Int!
  expiration: String!
  vat: Float!
  stock: Float!
  shop: Float!
  price: Float!
  medicine: Medicine!
  unit: Unit!
  form: Form!
}

type Medicine {
  id: Int!
  designation: String!
  medicineForms: [MedicineForm!]!
}

type SalesLine {
  id: Int!
  unitPrice: Float!
  quantity: Float!
  vat: Float!
  sale: Sale!
  medicine: Medicine!
  unit: Unit!
}

type PaymentMode {
  id: Float!
  label: String!
}

type Payment {
  id: Int!
  reference: String!
  description: String!
  date: String!
  paymentMode: PaymentMode!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ContactType {
  id: Int!
  label: String!
}

type Contact {
  id: Int!
  label: String!
  contactTypeId: Float!
}

type Provider {
  id: Int!
  name: String!
  address: String!
  logo: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  contacts: [Contact!]!
  commands: [Command!]!
}

type CommandLine {
  id: Float!
  unit: Unit!
  quantity: Float!
  price: Float!
  medicine: String!
  form: Form!
  commandId: Float!
  vat: Float!
}

type Command {
  id: Float!
  provider: Provider!
  arrived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  commandLines: [CommandLine!]!
}

type Invoice {
  id: Float!
  reference: String!
  dueDate: String!
  payment: Payment
  command: Command!
  commandId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Meta {
  itemCount: Float!
  totalItems: Float!
  itemsPerPage: Float!
  totalPages: Float!
  currentPage: Float!
}

type InvoicePagination {
  items: [Invoice!]!
  meta: Meta!
}

type CommandPagination {
  items: [Command!]!
  meta: Meta!
}

type ProviderPagination {
  items: [Provider!]!
  meta: Meta!
}

type RemovePaymentModeDto {
  id: Float!
  payment: Payment
}

type User {
  id: Int!
  username: String!
  password: String!
  avatar: String!
  createdAt: String!
  updatedAt: String!
}

type LoginDto {
  token: String!
}

type Measure {
  id: Float!
  children: [Measure!]!
  parentId: Float!
  label: String!
}

type Query {
  getHello: String!
  salesLine(id: Int!): SalesLine!
  sale(id: Int!): Sale!
  paginateInvoices(paginationInput: PaginationInput!): InvoicePagination!
  findOneInvoice(commandId: Float!): Invoice!
  paginateCommands(paginationInput: PaginationInput!): CommandPagination!
  providersPaginate(input: PaginationInput!): ProviderPagination!
  providers: [Provider!]!
  contactTypes: [ContactType!]!
  paymentModes: [PaymentMode!]!
  medicines: [Medicine!]!
  forms: [Form!]!
  whoAmI: User!
  units: [Unit!]!
  measures(measures: Boolean!): [Measure!]!
}

input PaginationInput {
  keyword: String
  page: Float!
  limit: Float!
}

type Mutation {
  createSalesLine(createSalesLineInput: CreateSalesLineInput!): SalesLine!
  updateSalesLine(updateSalesLineInput: UpdateSalesLineInput!): SalesLine!
  removeSalesLine(id: Int!): SalesLine!
  createSale(createSaleInput: CreateSaleInput!): Sale!
  updateSale(updateSaleInput: UpdateSaleInput!): Sale!
  removeSale(id: Int!): Sale!
  createInvoice(input: CreateInvoiceInput!): Invoice!
  updateInvoice(input: UpdateInvoiceInput!): Invoice!
  createCommand(input: CreateCommandInput!): Command!
  updateCommand(input: UpdateCommandInput!): Command!
  addCommandLine(input: CreateOrUpdateCommandLineInput!): Command!
  updateCommandLine(input: CreateOrUpdateCommandLineInput!): Command!
  removeCommandLine(id: Float!): Command!
  createProvider(input: CreateProviderInput!): Provider!
  addContacts(input: AddContactInput!): Provider!
  updateContact(input: UpdateContactInput!): Contact!
  createContactType(input: CreateContactTypeInput!): ContactType!
  updateContactType(input: UpdateContactTypeInput!): ContactType!
  savePayment(input: SavePaymentInput!): Invoice!
  removePaymentMode(id: Float!): RemovePaymentModeDto!
  createPaymentMode(input: PaymentModeInput!): PaymentMode!
  updatePaymentMode(input: PaymentModeInput!): PaymentMode!
  createMedicine(input: CreateMedicineInput!): Medicine!
  addMedicineForm(input: CreateMedicineFormInput!): Medicine!
  updateMedicineForm(input: UpdateMedicineFormInput!): MedicineForm!
  updateMedicine(input: UpdateMedicineInput!): Medicine!
  createForm(input: CreateFormInput!): Form!
  updateForm(input: UpdateFormInput!): Form!
  removeForm(id: Int!): Form!
  removeMedicineForm(id: Int!): MedicineForm!
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  login(input: AuthInput!): LoginDto!
  createUnit(input: CreateUnitInput!): Unit!
  updateUnit(input: UpdateUnitInput!): Unit!
  saveMeasure(input: SaveMeasureInput!): Measure!
  removeMeasure(id: Int!): Measure!
}

input CreateSalesLineInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSalesLineInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSaleInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSaleInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateInvoiceInput {
  dueDate: String!
  reference: String!
  commandId: Float!
}

input UpdateInvoiceInput {
  id: Float!
  dueDate: String!
  reference: String!
}

input CreateCommandInput {
  providerId: Float!
}

input UpdateCommandInput {
  id: Float!
  providerId: Float!
  arrived: Boolean
}

input CreateOrUpdateCommandLineInput {
  commandId: Float!
  commandLines: [CommandLineInput!]!
}

input CommandLineInput {
  id: Float
  medicine: String!
  unitId: Float!
  price: Float!
  quantity: Float!
  formId: Float!
  vat: Float!
}

input CreateProviderInput {
  name: String!
  address: String!
  contactTypes: [CreateContactInput!]!
}

input CreateContactInput {
  contactTypeId: Float!
  contacts: [String!]!
}

input AddContactInput {
  providerId: Float!
  contactTypeId: Float!
  contacts: [String!]!
}

input UpdateContactInput {
  id: Float!
  label: String!
}

input CreateContactTypeInput {
  label: String!
}

input UpdateContactTypeInput {
  label: String
  id: Float!
}

input SavePaymentInput {
  id: Float!
  reference: String!
  description: String!
  date: String!
  invoiceId: Float!
  paymentModeId: Float!
}

input PaymentModeInput {
  id: Float
  label: String!
}

input CreateMedicineInput {
  designation: String!
  medicineForms: [CreateMedicineFormInput!]!
}

input CreateMedicineFormInput {
  medicineId: Int
  formId: Int!
  unitId: Int!
  expiration: String!
  price: Float!
  vat: Float!
  quantity: Float!
}

input UpdateMedicineFormInput {
  id: Int!
  medicineId: Int!
  formId: Int!
  unitId: Int!
  expiration: String!
  price: Float!
  vat: Float!
  stock: Float!
  shop: Float!
}

input UpdateMedicineInput {
  id: Int!
  designation: String!
}

input CreateFormInput {
  label: String!
}

input UpdateFormInput {
  label: String
  id: Int!
}

input CreateUserInput {
  username: String!
  password: String!
}

input UpdateUserInput {
  id: Float!
  username: String!
}

input AuthInput {
  username: String!
  password: String!
}

input CreateUnitInput {
  label: String!
  multiplicity: Float!
  description: String!
  parentId: Int = 0
}

input UpdateUnitInput {
  label: String
  multiplicity: Float
  description: String
  parentId: Float = 0
  id: Float!
}

input SaveMeasureInput {
  id: Float!
  parentId: Float!
  label: String!
}
