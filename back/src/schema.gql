# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  username: String!
  avatar: String!
  password: String!
  createdAt: String!
  updatedAt: String!
}

type Meta {
  itemCount: Float!
  totalItems: Float!
  itemsPerPage: Float!
  totalPages: Float!
  currentPage: Float!
}

type ProviderPagination {
  items: [Provider!]!
  meta: Meta!
}

type Contact {
  type: Float!
  list: [String!]!
}

type Article {
  id: Float!
  dci: String!
  commercialName: String!
  medicines: [Medicine!]!
  updatedAt: DateTime!
  createdAt: DateTime!
  archivedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Form {
  id: Float!
  label: String!
  archivedAt: DateTime
}

type Dosage {
  id: Float!
  parentId: Float!
  label: String!
  archivedAt: DateTime
}

type Unit {
  label: String!
  multiplicity: Float!
}

type Packaging {
  id: Float!
  units: [Unit!]!
  archivedAt: DateTime
}

type Patient {
  id: Float!
  name: String!
  phone: String!
  prescriptions: [Prescription!]!
  archivedAt: DateTime!
  createdAt: DateTime!
}

type Prescription {
  id: Float!
  reference: String!
  description: String!
  patient: Patient!
  sale: Sale!
  archivedAt: DateTime!
}

type Sale {
  id: Float!
  createdAt: DateTime!
  prescription: Prescription
  stockMovements: [StockMovement!]!
  archivedAt: DateTime
}

type Method {
  id: Float!
  label: String!
  archivedAt: DateTime!
}

type Payment {
  id: Float!
  reference: String!
  note: String!
  method: Method!
  invoice: Invoice!
  date: String!
  archivedAt: DateTime
}

type Invoice {
  id: Float!
  deliveryDate: String!
  dueDate: String!
  payment: Payment
  command: Command!
  stockMovements: [StockMovement!]!
  expense: Float!
  reference: String!
  createdAt: DateTime!
  archivedAt: DateTime
}

type StockMovement {
  id: Int!
  batch: Batch!
  invoice: Invoice
  sale: Sale
  quantity: Float!
  price: Float!
  stock: Float!
  discount: Float!
  vat: Float!
  out: [StockMovement!]!
}

type Batch {
  id: Float!
  medicine: Medicine!
  stockMovements: [StockMovement!]!
  expirationDate: String!
  currentStock: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  archivedAt: DateTime
}

type Medicine {
  id: Float!
  article: Article!
  form: Form!
  dosage: Dosage!
  packaging: Packaging!
  batches: [Batch!]!
  commandLines: [CommandLine!]
  currentSalePrice: Float!
  stockTotal: Int!
  currentVat: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  archivedAt: DateTime
}

type CommandLine {
  id: String!
  quantity: Float!
  medicine: Medicine!
  command: Command!
  commandId: Float!
  archivedAt: DateTime
}

type Command {
  id: Float!
  invoice: Invoice
  commandLines: [CommandLine!]
  provider: Provider!
  createdAt: DateTime!
  archivedAt: DateTime
}

type Provider {
  id: Float!
  name: String!
  contacts: [Contact!]!
  address: String!
  avatar: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  commands: [Command!]!
  archivedAt: DateTime
}

type CommandPagination {
  items: [Command!]!
  meta: Meta!
}

type ProviderCommandsChart {
  month: Float!
  command: Float!
  invoice: Float!
}

type CommandsMonthly {
  month: Float!
  command: Float!
  invoice: Float!
}

type MedicinePaginationOutput {
  items: [Medicine!]!
  meta: Meta!
}

type MostConsumedMedicineOutput {
  medicine: Medicine!
  count: Int!
}

type SoftRemoveMedicineOutput {
  medicine: Medicine!
  article: Article!
}

type ArticlePagination {
  items: [Article!]!
  meta: Meta!
}

type StockMovementPagination {
  items: [StockMovement!]!
  meta: Meta!
}

type CancelSaleLineOutput {
  sale: Sale!
  batches: [Batch!]!
}

type InvoicePagination {
  items: [Invoice!]!
  meta: Meta!
}

type BatchPaginationOutput {
  items: [Batch!]!
  meta: Meta!
}

type SoftRemoveBatchOutput {
  batch: Batch!
  medicine: Medicine!
}

type SalePagination {
  items: [Sale!]!
  meta: Meta!
}

type PaginatePatientSalesOutput {
  items: [Sale!]!
  meta: Meta!
}

type CountSaleDaily {
  day: String!
  count: Int!
}

type Count2LatestWeekSales {
  last: [CountSaleDaily!]!
  current: [CountSaleDaily!]!
}

type PaginatePatientOutput {
  items: [Patient!]!
  meta: Meta!
}

type LoginDto {
  token: String!
}

type Query {
  paginateProviders(input: PaginationInput!): ProviderPagination!
  providerCommandsChart(input: ProviderCommandsInput!): [ProviderCommandsChart!]!
  countProviders: Int!
  paginateDeletedProviders(input: PaginationInput!): ProviderPagination!
  paginateCommands(input: PaginateProviderCommandsInput!): CommandPagination!
  findCommandById(id: Int!): Command!
  countUndeliveredCommands: Int!
  commandsMonthly(year: Int!): [CommandsMonthly!]!
  paginateDeletedCommands(input: PaginationInput!): CommandPagination!
  countMedicines: Int!
  mostConsumedMedicines(year: Int!): [MostConsumedMedicineOutput!]!
  paginateDeletedMedicines(input: PaginationInput!): MedicinePaginationOutput!
  forms: [Form!]!
  countForms: Int!
  dosages: [Dosage!]!
  countDosages: Int!
  packaging: [Packaging!]!
  deletedPackaging: [Packaging!]!
  paginateArticles(input: PaginateArticleInput!): ArticlePagination!
  findOneArticle(keyword: String!): Article
  countArticles: Int!
  paginateDeletedArticles(input: PaginationInput!): ArticlePagination!
  paginateStockMovement(input: PaginateStockMovementInput!): StockMovementPagination!
  paginateInvoices(input: PaginateInvoiceInput!): InvoicePagination!
  countUnpaidInvoices: Int!
  paginateDeletedInvoices(input: PaginationInput!): InvoicePagination!
  methods: [Method!]!
  findExistingBatch(input: FindExistingBatchInput!): Batch
  paginateDeletedBatches(input: PaginationInput!): BatchPaginationOutput!
  countStockMovements(id: Int!): Float!
  paginateSales(paginationInput: PaginationInput!): SalePagination!
  count2LatestWeekSales: Count2LatestWeekSales!
  paginateDeletedSales(input: PaginationInput!): SalePagination!
  findSuggestedPatients(keyword: String!): [Patient!]!
  paginatePatients(input: PaginationInput!): PaginatePatientOutput!
  paginatePatientSales(input: PaginatePatientSalesInput!): PaginatePatientSalesOutput!
  whoAmI: User!
}

input PaginationInput {
  keyword: String
  page: Float!
  limit: Float!
}

input ProviderCommandsInput {
  year: Int!
  providerId: Int!
}

input PaginateProviderCommandsInput {
  keyword: String
  page: Float!
  limit: Float!
  providerInput: ProviderCommandsInput
}

input PaginateArticleInput {
  keyword: String
  page: Float!
  limit: Float!
  measureInput: FindByMeasureInput
}

input FindByMeasureInput {
  id: Int!
  foreignKey: String!
}

input PaginateStockMovementInput {
  medicineId: Float!
  batchId: Float
  page: Float!
  limit: Float!
}

input PaginateInvoiceInput {
  keyword: String
  page: Float!
  limit: Float!
  paymentId: Float
}

input FindExistingBatchInput {
  medicineId: Float!
  expirationDate: String!
}

input PaginatePatientSalesInput {
  patientId: Int!
  page: Int!
  limit: Int!
}

type Mutation {
  removeAllArchived(repo: String!): Float!
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  updatePassword(input: UpdatePasswordInput!): User
  updateUserAvatar(avatar: Upload!): User!
  saveProvider(input: SaveProviderInput!): Provider!
  softRemoveProvider(id: Int!): Provider!
  removeProvider(id: Int!): Boolean!
  restoreProvider(id: Int!): Provider
  updateProviderAvatar(id: Int!, avatar: Upload!): Provider!
  createCommand(input: CreateCommandInput!): Command!
  updateCommand(input: UpdateCommandInput!): Command!
  softRemoveCommand(id: Int!): Command!
  removeCommand(id: Int!): Boolean!
  restoreCommand(id: Int!): Command
  addCommandLine(input: AddCommandLineInput!): Command!
  updateCommandLine(input: UpdateCommandLineInput!): CommandLine!
  removeCommandLine(id: String!): Command!
  createMedicine(input: CreateMedicineInput!): Article!
  updateMedicine(input: UpdateMedicineInput!): Medicine!
  softRemoveMedicine(id: Int!): SoftRemoveMedicineOutput!
  removeMedicine(id: Int!): Boolean!
  restoreMedicine(id: Int!): Article
  createForm(input: CreateFormInput!): Form
  updateForm(input: UpdateFormInput!): Form
  deleteForm(id: Int!): Boolean!
  saveDosage(input: SaveDosageInput!): Dosage!
  deleteDosage(id: Int!): Boolean!
  createPackaging(input: [CreatePackagingInput!]!): Packaging!
  updatePackaging(input: UpdatePackagingInput!): Packaging!
  softRemovePackaging(id: Int!): Packaging!
  removePackaging(id: Int!): Boolean!
  restorePackaging(id: Int!): Packaging!
  saveArticle(input: SaveArticleInput!): Article!
  softRemoveArticle(id: Int!): Article!
  removeArticle(id: Int!): Boolean!
  restoreArticle(id: Int!): Article
  updateAssuredLine(input: UpdateAssuredLineInput!): StockMovement!
  updateSaleLine(input: UpdateSaleLineInput!): StockMovement!
  cancelSaleLines(input: CancelSaleLinesInput!): CancelSaleLineOutput!
  addSaleLines(input: AddSaleLineInput!): Sale!
  createInvoice(input: CreateInvoiceInput!): Command!
  updateInvoice(input: UpdateInvoiceInput!): Invoice!
  softRemoveInvoice(id: Int!): Invoice!
  removeInvoice(id: Int!): Boolean!
  restoreInvoice(id: Int!): Invoice
  createPayment(input: CreatePaymentInput!): Invoice!
  updatePayment(input: UpdatePaymentInput!): Payment!
  createMethod(input: MethodInput!): Method!
  updateMethod(input: MethodInput!): Method!
  removeMethod(id: Int!): Boolean!
  createBatch(input: BatchFormInput!): Medicine
  updateBatch(input: UpdateBatchInput!): Batch!
  softRemoveBatch(id: Int!): SoftRemoveBatchOutput!
  removeBatch(id: Int!): Boolean!
  restoreBatch(id: Int!): Medicine
  createSale(input: CreateSaleInput!): Sale!
  softRemoveSale(id: Int!): Sale
  removeSale(id: Int!): Boolean!
  restoreSale(id: Int!): Sale
  createPrescription(input: CreatePrescriptionInput!): Sale!
  updatePrescription(input: UpdatePrescriptionInput!): Prescription!
  deletePrescription(input: DeletePrescriptionInput!): Sale!
  updatePatient(input: CreatePatientInput!): Patient!
  removePatient(id: Int!): Patient!
  login(input: AuthInput!): LoginDto!
}

input CreateUserInput {
  username: String!
  password: String!
}

input UpdateUserInput {
  username: String!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input SaveProviderInput {
  id: Float!
  name: String!
  address: String!
  contacts: [ContactInput!]!
}

input ContactInput {
  type: Float!
  list: [String!]!
}

input CreateCommandInput {
  providerId: Float!
  commandLines: [CommandLineInput!]!
}

input CommandLineInput {
  medicineId: Float!
  quantity: Float!
}

input UpdateCommandInput {
  id: Float!
  providerId: Float!
}

input AddCommandLineInput {
  commandId: Float!
  commandLine: CommandLineInput!
}

input UpdateCommandLineInput {
  id: String!
  commandLine: CommandLineInput!
}

input CreateMedicineInput {
  articleId: Int!
  form: MedicineFormInput!
}

input MedicineFormInput {
  formId: Int!
  dosageId: Int!
  packagingId: Int!
  currentSalePrice: Float!
  currentVat: Float!
}

input UpdateMedicineInput {
  id: Int!
  form: MedicineFormInput!
}

input CreateFormInput {
  label: String!
}

input UpdateFormInput {
  label: String!
  id: Int!
}

input SaveDosageInput {
  id: Float!
  parentId: Float!
  label: String!
}

input CreatePackagingInput {
  label: String!
  multiplicity: Int!
}

input UpdatePackagingInput {
  id: Int!
  units: [CreatePackagingInput!]!
}

input SaveArticleInput {
  id: Int = 0
  dci: String!
  commercialName: String!
}

input UpdateAssuredLineInput {
  id: Int!
  updateCurVat: Boolean!
  batch: BatchFormInput!
  assuredLine: StockMovementFormInput!
}

input BatchFormInput {
  medicineId: Int!
  expirationDate: String!
  currentStock: Int
}

input StockMovementFormInput {
  quantity: Int!
  price: Float!
  vat: Float!
  discount: Float!
}

input UpdateSaleLineInput {
  quantity: Int!
  price: Float!
  vat: Float!
  discount: Float!
  batchId: Int!
  id: Int!
}

input CancelSaleLinesInput {
  saleId: Int!
  saleLineIds: [Int!]!
}

input AddSaleLineInput {
  saleId: Int!
  saleLines: [SaleLineInput!]!
}

input SaleLineInput {
  quantity: Int!
  price: Float!
  vat: Float!
  discount: Float!
  batchId: Int!
}

input CreateInvoiceInput {
  invoice: InvoiceInput!
  assuredLines: [AssuredLineInput!]!
}

input InvoiceInput {
  commandId: Float!
  dueDate: String!
  reference: String!
  expense: Float!
  deliveryDate: String!
}

input AssuredLineInput {
  quantity: Int!
  price: Float!
  vat: Float!
  discount: Float!
  medicineId: Float!
  expirationDate: String!
}

input UpdateInvoiceInput {
  dueDate: String
  reference: String
  expense: Float
  deliveryDate: String
  id: Float!
}

input CreatePaymentInput {
  invoiceId: Float!
  form: PaymentFormInput!
}

input PaymentFormInput {
  methodeId: Float!
  reference: String!
  note: String = ""
  date: String!
}

input UpdatePaymentInput {
  id: Float!
  form: PaymentFormInput!
}

input MethodInput {
  id: Float
  label: String!
}

input UpdateBatchInput {
  id: Int!
  form: BatchFormInput!
}

input CreateSaleInput {
  prescription: PrescriptionInput
  saleLines: [SaleLineInput!]!
}

input PrescriptionInput {
  reference: String!
  description: String!
  patient: CreatePatientInput!
}

input CreatePatientInput {
  id: Int
  name: String!
  phone: String!
}

input CreatePrescriptionInput {
  reference: String!
  description: String!
  patient: CreatePatientInput!
  saleId: Float!
}

input UpdatePrescriptionInput {
  reference: String!
  description: String!
  patient: CreatePatientInput!
  id: Float!
}

input DeletePrescriptionInput {
  id: Float!
  saleId: Float!
}

input AuthInput {
  username: String!
  password: String!
}
